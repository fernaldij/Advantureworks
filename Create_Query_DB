-------------------------------------------------------
-- Lesson 1: Create and query database objects --------
-- Source:www.docs.microsoft.com/en-us/sql/t-sql/lesson-1-creating-database-objects?view=sql-server-ver15
-------------------------------------------------------

CREATE DATABASE TestData --create a database named TestData in Object Explorer
GO

-------------------------------------------------------
-- Create a Table 
-------------------------------------------------------

USE TestData --change your connection to the TestData database
GO

CREATE TABLE dbo.Products  --create a table named Products
   (ProductID int PRIMARY KEY NOT NULL,  
   ProductName varchar(25) NOT NULL,  
   Price money NULL,  
   ProductDescription varchar(max) NULL)  
GO 

-------------------------------------------------------
-- Insert and update data in a table 
-------------------------------------------------------

-- Standard syntax  
INSERT dbo.Products (ProductID, ProductName, Price, ProductDescription)  
    VALUES (1, 'Clamp', 12.48, 'Workbench clamp')  
GO 

-- To delete all the rows in the table, use the command below
-- TRUNCATE TABLE TestData.dbo.Products;
-- GO

-- Changing the order of the columns  
INSERT dbo.Products (ProductName, ProductID, Price, ProductDescription)  
    VALUES ('Screwdriver', 50, 3.17, 'Flat head')  
GO

-- Skipping the column list, but keeping the values in order  
-- This syntax is common but is not recommended because it might be harder for others to understand your code
INSERT dbo.Products  
    VALUES (75, 'Tire Bar', NULL, 'Tool for changing tires.')  
GO  

-- Dropping the optional dbo and dropping the ProductDescription column  
-- schema name is optional as long as you are accessing and changing a table in your default schema
-- Because the ProductDescription column allows null values and no value is being provided
-- the ProductDescription column name and value can be dropped from the statement completely
INSERT Products (ProductID, ProductName, Price)  
    VALUES (3000, '3 mm Bracket', 0.52)  
GO 

-- change the ProductName of the second product from Screwdriver, to Flat Head Screwdriver
UPDATE dbo.Products  
    SET ProductName = 'Flat Head Screwdriver'  
    WHERE ProductID = 50  
GO  

-------------------------------------------------------
-- Read data from a table 
-------------------------------------------------------

-- The basic syntax for reading data from a single table  
SELECT ProductID, ProductName, Price, ProductDescription  
    FROM dbo.Products  
GO

-- Returns all columns in the table  
-- Does not use the optional schema, dbo  
SELECT * FROM Products  
GO

-- Returns only two of the columns from the table  
SELECT ProductName, Price  
    FROM dbo.Products  
GO

-- Returns only two of the records in the table  
SELECT ProductID, ProductName, Price, ProductDescription  
    FROM dbo.Products  
    WHERE ProductID < 60  
GO

-- Returns ProductName and the Price including a 7% tax  
-- Provides the name CustomerPays for the calculated column  
SELECT ProductName, Price * 1.07 AS CustomerPays  
    FROM dbo.Products  
GO

-------------------------------------------------------
-- Create views and stored procedures 
-------------------------------------------------------

-- view is a stored SELECT statement
-- stored procedure is one or more Transact-SQL statements that execute as a batch

-- create a view that executes a select statement, and returns the names and prices of our products to the user
CREATE VIEW vw_Names  
   AS  
   SELECT ProductName, Price FROM Products;  
GO

-- test the view
-- Views are treated just like tables. Use a SELECT statement to access a view
SELECT * FROM vw_Names;  
GO 

-- !!!!!!!!!!!!!!!!!!!!!!!!!
-- Create a stored procedure

-- creates a stored procedure name pr_Names
-- accepts an input parameter named @VarPrice of data type money
-- The stored procedure prints the statement Products less than concatenated with the input parameter
-- that is changed from the money data type into a varchar(10) character data type
-- the procedure executes a SELECT statement on the view,
-- passing the input parameter as part of the WHERE clause
-- returns all products that cost less than the input parameter value

CREATE PROCEDURE pr_Names @VarPrice money  
   AS  
   BEGIN  
      -- The print statement returns text to the user  
      PRINT 'Products less than ' + CAST(@VarPrice AS varchar(10));  
      -- A second statement starts here  
      SELECT ProductName, Price FROM vw_Names  
            WHERE Price < @varPrice;  
   END  
GO

-- test the stored procedure
EXECUTE pr_Names 10.00;  
GO 
